// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSErosion

RWStructuredBuffer<float3> vertices;
StructuredBuffer<int> randomIndices;
StructuredBuffer<int> brushIndices;
StructuredBuffer<float> brushWeights;

int resolution;
int brushLength;
int borderSize;

int maxLifetime;
float inertia;
float sedimentCapacityFactor;
float minSedimentCapacity;
float depositSpeed;
float erodeSpeed;

float evaporateSpeed;
float gravity;
float startSpeed;
float startWater;

// Returns float3(gradientX, gradientY, height)
float3 CalculateHeightAndGradient(float posX, float posY)
{
	int coordX = (int)posX;
	int coordY = (int)posY;

	// Calculate droplet's offset inside the cell (0,0) = at NW node, (1,1) = at SE node
	float x = posX - coordX;
	float y = posY - coordY;

	// Calculate heights of the four nodes of the droplet's cell
	int nodeIndexNW = coordY * resolution + coordX;
	float heightNW = vertices[nodeIndexNW].y;
	float heightNE = vertices[nodeIndexNW + 1].y;
	float heightSW = vertices[nodeIndexNW + resolution].y;
	float heightSE = vertices[nodeIndexNW + resolution + 1].y;

	// Calculate droplet's direction of flow with bilinear interpolation of height difference along the edges
	float gradientX = (heightNE - heightNW) * (1 - y) + (heightSE - heightSW) * y;
	float gradientY = (heightSW - heightNW) * (1 - x) + (heightSE - heightNE) * x;

	// Calculate height with bilinear interpolation of the heights of the nodes of the cell
	float height = heightNW * (1 - x) * (1 - y) + heightNE * x * (1 - y) + heightSW * (1 - x) * y + heightSE * x * y;

	return float3(gradientX, gradientY, height);
}

[numthreads(1024, 1, 1)]
void CSErosion(uint3 id : SV_DispatchThreadID)
{
	int index = randomIndices[id.x];
	float posX = float(index) % resolution;
	float posY = float(index) / resolution;
	float dirX = 0;
	float dirY = 0;
	float speed = startSpeed;
	float water = startWater;
	float sediment = 0;

	for (int lifetime = 0; lifetime < maxLifetime; lifetime++)
	{
		int nodeX = (int)posX;
		int nodeY = (int)posY;
		int dropletIndex = nodeY * resolution + nodeX;

		// Calculate droplet's offset inside the cell (0,0) = at NW node, (1,1) = at SE node
		float cellOffsetX = posX - nodeX;
		float cellOffsetY = posY - nodeY;

		// Calculate droplet's height and direction of flow with bilinear interpolation of surrounding heights
		float3 heightAndGradient = CalculateHeightAndGradient(posX, posY);

		// Update the droplet's direction and position (move position 1 unit regardless of speed)
		dirX = (dirX * inertia - heightAndGradient.x * (1 - inertia));
		dirY = (dirY * inertia - heightAndGradient.y * (1 - inertia));
		// Normalize direction
		float len = max(0.01, sqrt(dirX * dirX + dirY * dirY));
		dirX /= len;
		dirY /= len;
		posX += dirX;
		posY += dirY;

		// Stop simulating droplet if it's not moving or has flowed over edge of map
		if ((dirX == 0 && dirY == 0) || posX < 0 || posX > resolution || posY < 0 || posY > resolution) {
			break;
		}

		// Find the droplet's new height and calculate the deltaHeight
		float newHeight = CalculateHeightAndGradient(posX, posY).z;
		float deltaHeight = newHeight - heightAndGradient.z;

		// Calculate the droplet's sediment capacity (higher when moving fast down a slope and contains lots of water)
		float sedimentCapacity = max(-deltaHeight * speed * water * sedimentCapacityFactor, minSedimentCapacity);

		// If carrying more sediment than capacity, or if flowing uphill:
		if (sediment > sedimentCapacity || deltaHeight > 0) {
			// If moving uphill (deltaHeight > 0) try fill up to the current height, otherwise deposit a fraction of the excess sediment
			float amountToDeposit = (deltaHeight > 0) ? min(deltaHeight, sediment) : (sediment - sedimentCapacity) * depositSpeed;
			sediment -= amountToDeposit;

			// Add the sediment to the four nodes of the current cell using bilinear interpolation
			// Deposition is not distributed over a radius (like erosion) so that it can fill small pits
			vertices[dropletIndex].y += amountToDeposit * (1 - cellOffsetX) * (1 - cellOffsetY);
			vertices[dropletIndex + 1].y += amountToDeposit * cellOffsetX * (1 - cellOffsetY);
			vertices[dropletIndex + resolution].y += amountToDeposit * (1 - cellOffsetX) * cellOffsetY;
			vertices[dropletIndex + resolution + 1].y += amountToDeposit * cellOffsetX * cellOffsetY;
		}
		else {
			// Erode a fraction of the droplet's current carry capacity.
			// Clamp the erosion to the change in height so that it doesn't dig a hole in the terrain behind the droplet
			float amountToErode = min((sedimentCapacity - sediment) * erodeSpeed, -deltaHeight);

			for (int i = 0; i < brushLength; i++) {
				int erodeIndex = dropletIndex + brushIndices[i];

				float weightedErodeAmount = amountToErode * brushWeights[i];
				float deltaSediment = (vertices[erodeIndex].y < weightedErodeAmount) ? vertices[erodeIndex].y : weightedErodeAmount;
				vertices[erodeIndex].y -= deltaSediment;
				sediment += deltaSediment;
			}
		}

		// Update droplet's speed and water content
		speed = sqrt(max(0, speed * speed + deltaHeight * gravity));
		water *= (1 - evaporateSpeed);
	}


}
